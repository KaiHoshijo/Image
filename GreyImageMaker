import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class GreyImageMaker {
    public static void main(String[] main) {
        int rows = 640;
        int cols = 480;
        int[][] matrix = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                // matrix[i][j] = (int) ( i * Math.pow(Math.E, j * (Math.PI / rows)) );
                // matrix[i][j] = (int) ( i * Math.pow(Math.E, j * (Math.PI / (i+1))) );
                // matrix[i][j] = (int) ( i * j + Math.sin(Math.PI / Math.E) );
                // matrix[i][j] = (int) ( i * Math.PI + j * Math.E ) ;
                // matrix[i][j] = (int) (Math.cos(i / 2) + Math.sin(j / 2)) ;
                // double newI = i / 10.0;
                // double newJ = j / 10.0;
                // double a = Math.cos(newI) + (1 / Math.sin(newJ));
                // double b = Math.sin(newI) - (1 / Math.cos(newJ));
                // matrix[i][j] = (int) ( a + b );
                // double newI = i / 10.0;
                // double newJ = j / 10.0;
                // double a = Math.tan(newI) + (1 / Math.cos(newJ));
                // double b = Math.sin(newI) - (1 / Math.tan(newJ));
                // matrix[i][j] = (int) ( a + b );
                // matrix[i][j] = (int) ( Math.pow(i, 2) + Math.pow(j, 2) - Math.sin(i + j) );
                // matrix[i][j] = (int) ( Math.pow(i, 3) + Math.pow(j, 3) ) / 1000;
                // matrix[i][j] = (int) ( Math.pow(i / 2, 4) + Math.pow(j / 2, 4)) * 2; 
                // matrix[i][j] = (int) (Math.pow(j/2,2) - Math.pow(i/2,2) );
                // matrix[i][j] = (int) ( Math.tan((j + 1) / 8.0) / Math.sin((i + 1) / 8.0) );
                // matrix[i][j] = (int) ( Math.pow(i, 2) - Math.pow(j,2) ) % 100;
                matrix[i][j] = (int) ( j / (i+1) ) % 255;
            }
        }
        makeImage("H:\\a.jpg", matrix);
}
    /**
     * This method writes a greyscale matrix to a png, jpg, or gif file.
     *
     * Students, don't worry about this function... it's just so we can have fun in class, you're not expected to
     * understand it.
     *
     * @param filename  The filename to write to.  Must have .jpg, .png, or .gif extension.
     * @param matrix The 2D array of data for the image.  Row-Major format.
     */
    public static void makeImage(String filename, int[][] matrix) {
        int width = matrix[0].length;
        int height = matrix.length;
        String ext = filename.split("[.]")[filename.split("[.]").length - 1].toLowerCase();

        if (!ext.equals("jpg") && !ext.equals("png") && !ext.equals("gif")) {
            System.err.println("Could not identify image extension: " + ext);
            return;
        }

        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        for (int x = 0; x < height; x++) {
            for (int y = 0; y < width; y++) {
                Color c = new Color(matrix[x][y] & 0xFF, matrix[x][y] & 0xFF, matrix[x][y] & 0xFF);
                img.setRGB(y, x, c.getRGB());
            }
        }

        try {
            File ImageFile = new File(filename);
            ImageIO.write(img, ext, ImageFile);
        }
        catch (IOException ex) {
            System.err.println("Could not write file: " + ex.toString());
        }
    }
}
